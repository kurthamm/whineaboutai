import json
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from http.server import BaseHTTPRequestHandler

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            # Parse request data
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            # Extract form fields
            name = data.get('name', '').strip()
            email = data.get('email', '').strip()
            subject = data.get('subject', '').strip()
            message = data.get('message', '').strip()
            frustration_level = data.get('frustrationLevel', '5')
            
            # Validate required fields
            if not all([name, email, subject, message]):
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({
                    'error': 'All fields are required! Even our form validation has standards.'
                }).encode())
                return
            
            # Map frustration levels to fun descriptions
            frustration_map = {
                '1': 'Zen Master', '2': 'Slightly Peeved', '3': 'Mildly Annoyed',
                '4': 'Getting Irritated', '5': 'Moderately Annoyed', '6': 'Pretty Mad',
                '7': 'Really Angry', '8': 'Furious', '9': 'Seeing Red', '10': 'HULK SMASH!'
            }
            
            subject_map = {
                'general': 'General Inquiry (Boring but necessary)',
                'bug': 'Bug Report (Something\'s broken, shocking!)',
                'feature': 'Feature Request (Bold of you to assume we implement features)',
                'complaint': 'Complaint About Our Complaint Platform (Meta level: Expert)',
                'business': 'Business/Partnership (Make it worth our while)',
                'privacy': 'Privacy Concern (Your data is safe from us caring about it)',
                'legal': 'Legal Issue (Our lawyer is also an AI)',
                'other': 'Other (Surprise us!)'
            }
            
            # Create email content
            frustration_text = frustration_map.get(frustration_level, 'Unknown')
            subject_text = subject_map.get(subject, subject)
            
            email_subject = f"WhineAboutAI Contact: {subject_text}"
            
            email_body = f"""
🤖 ALERT: SOMEONE COMPLAINED ABOUT OUR COMPLAINT PLATFORM! 🤖

Congratulations! You've received a complaint about WhineAboutAI.com.
The irony levels are off the charts! 📊

📝 COMPLAINT-CEPTION DETAILS:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👤 Complainer: {name}
📧 Reply Address: {email}
📋 Complaint Category: {subject_text}
😤 Frustration Level: {frustration_level}/10 ({frustration_text})
📅 Time of Complaint: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}

💬 THEIR ACTUAL COMPLAINT:
{message}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 NEXT STEPS:
• Reply to {email} if you feel like it
• File this under "Things That Are Probably Our Fault"
• Consider if this deserves a sarcastic response
• Or just add it to the pile with all the other complaints

📬 Delivered to: complaints-about-complaints@whineaboutai.com
🤖 Auto-generated by WhineAboutAI Contact Form
✨ Powered by digital suffering and existential dread
"""
            
            # Send email to our hilarious inbox
            recipient_email = "complaints-about-complaints@whineaboutai.com"
            
            # Log the submission
            print(f"Contact form submission received:")
            print(f"From: {name} <{email}>")
            print(f"Subject: {subject_text}")
            print(f"Frustration: {frustration_text}")
            print(f"Message: {message}")
            print(f"Forwarding to: {recipient_email}")
            
            # TODO: Add actual email sending when SMTP is configured
            # For now, we're just logging it with our funny email address
            
            # Generate a witty response based on the subject
            responses = {
                'general': f"Thanks for your general inquiry! It's been forwarded to complaints-about-complaints@whineaboutai.com where it will be read with our usual level of enthusiasm (which is minimal).",
                'bug': f"A bug report? How shocking! We've sent it to complaints-about-complaints@whineaboutai.com to add to our ever-growing pile of 'things that are broken but we pretend are features.'",
                'feature': f"A feature request? How optimistic! Your submission is now in the complaints-about-complaints@whineaboutai.com inbox, filed right next to our plans for world peace.",
                'complaint': f"A complaint about our complaint platform? *Chef's kiss* The irony is delicious! This meta-complaint has been sent to complaints-about-complaints@whineaboutai.com where we're not sure if we should fix it or frame it.",
                'business': f"A business inquiry? Someone thinks we're worth partnering with? How adorable! We've forwarded your proposal to complaints-about-complaints@whineaboutai.com where we'll consider it while counting our dozens of dollars.",
                'privacy': f"Privacy concerns? Your worries have been sent to complaints-about-complaints@whineaboutai.com. Don't worry, your data is safe from us because we're too lazy to do anything malicious with it.",
                'legal': f"Legal issues? We've escalated this to complaints-about-complaints@whineaboutai.com where our AI lawyer will get right on it. Just kidding, our AI lawyer is ChatGPT with a law degree from Google University.",
                'other': f"An 'other' category submission? You've managed to surprise us! Your mystery complaint has been forwarded to complaints-about-complaints@whineaboutai.com, which is impressive given our low expectations!"
            }
            
            response_message = responses.get(subject, "Thanks for your submission! We'll respond when the AI overlords permit us to.")
            
            # Send success response
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({
                'success': True,
                'message': response_message
            }).encode())
            
        except json.JSONDecodeError:
            self.send_response(400)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                'error': 'Invalid JSON data. Even our form parser has AI problems!'
            }).encode())
            
        except Exception as e:
            print(f"Contact form error: {str(e)}")
            self.send_response(500)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                'error': 'Internal server error. Our contact form just had an existential crisis!'
            }).encode())
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()